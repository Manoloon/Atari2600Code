
	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start an uninitialized segment at $80 for var declaration.
;; We have memory from $80 to $FF to work with, minus a few at
;; the end if we use the stack.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	seg.u Variables
        org $80
P0Height equ 9 ; seria lo mismo que .byte 
P1Height equ 9   
P0PosY	byte
P1PosY	byte
P0PosX	byte


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start our ROM code segment starting at $F000.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	seg Code
	org $f000

reset:
	CLEAN_START
        
        ldx #$88		
	stx COLUBK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Initialize variables
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
        lda #50
        sta P0PosY
        sta P0PosX 
	
        lda #9
        sta P0Height
        sta P1Height
       
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start a new frame by configuring VBLANK and VSYNC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        
NextFrame
        lda #02
	sta VBLANK
	sta VSYNC
		
	REPEAT 3
		sta WSYNC 		; 3 time WSYNC
	REPEND
	
	lda #0
	sta VSYNC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Start calculate Horizontal pos for Player0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        lda P0PosX		; load to A desired X pos
	and #$7F		; same as %0111111 -> this set bit 7 to 0 
        			; keep the value positive.
	sec			; antes de un sbc siempre va un sec
        sta WSYNC		; 1 scanline
	STA HMCLR		; clear Horizontal pos

divideLoop:
	sbc #15			; subst 15 from A ( no tenemos division)
	bcs divideLoop 		; loop while carry is still set
	
				; eor es Exclusive OR
	eor #7			; adjust the remainder on range from -8 to 7
	asl			; shift left by 4, HMP0 only uses only top 4 bits.
	asl
	asl
	asl
	sta HMP0		; set fine pos
	sta RESP0		; set player at the 15-step fix
	sta WSYNC		; wait next scanline 1+ scanline
	sta HMOVE		; apply fine pos
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Let the TIA output the 37 lines recommended for the VBLANK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
        
	REPEAT 35		; 35 +2 lines used in the code above = 37 Vblank
		sta WSYNC
	REPEND
	
        lda #0
	sta VBLANK
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start 192 lines visibles
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	 ldx #192
gameLoop:
	txa
        sec
        sbc P0PosY
        sbc P1PosY
        cmp #P0Height
        cmp #P1Height
        bcc P0Bitmap
        lda #0
       	
P0Bitmap:
	tay
        lda P0bmp,Y
        sta GRP0
        sta GRP1
        lda P0Color,Y        
	sta COLUP0
        lda P1Color,Y
        sta COLUP1
        sta WSYNC
        dex
        bne gameLoop
        
        lda #0
        sta GRP0
        sta GRP1

        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup table for the player graphics bitmap
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	lda #2				
	sta VBLANK
	
        REPEAT 30
	sta WSYNC
	REPEND
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Before jump next frame increment the X pos of Player0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	inc P0PosX
        jmp NextFrame

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup table for the player graphics bitmap
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
P0bmp:
        .byte %00000000
        .byte %00001000
        .byte %00011100
        .byte %00001000
        .byte %00001000
        .byte %00011100
        .byte %00111110
        .byte %01111111
        .byte %00101010
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Lookup table for the player colors
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
P0Color:
    	byte #$00
    	byte #$40
    	byte #$40
    	byte #$40
    	byte #$40
    	byte #$42
    	byte #$42
    	byte #$44
    	byte #$d2
        
P1Color:
    	byte #$00
    	byte #$80
    	byte #$80
    	byte #$80
    	byte #$80
    	byte #$82
    	byte #$82
    	byte #$84
    	byte #$82
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Complete ROM size
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	org $fffc
        .long reset	; reset vector
